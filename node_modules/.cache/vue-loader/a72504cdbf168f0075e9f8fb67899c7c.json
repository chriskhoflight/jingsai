{"remainingRequest":"F:\\gitProject\\rcms_src\\rcms-pc-web\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!F:\\gitProject\\rcms_src\\rcms-pc-web\\src\\views\\home\\components\\countUp.vue?vue&type=script&lang=js&","dependencies":[{"path":"F:\\gitProject\\rcms_src\\rcms-pc-web\\src\\views\\home\\components\\countUp.vue","mtime":1564969187205},{"path":"F:\\gitProject\\rcms_src\\rcms-pc-web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"F:\\gitProject\\rcms_src\\rcms-pc-web\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"F:\\gitProject\\rcms_src\\rcms-pc-web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"F:\\gitProject\\rcms_src\\rcms-pc-web\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n\r\nimport CountUp from 'countup';\r\n\r\nfunction transformValue (val) {\r\n    let endVal = 0;\r\n    let unit = '';\r\n    if (val < 1000) {\r\n        endVal = val;\r\n    } else if (val >= 1000 && val < 1000000) {\r\n        endVal = parseInt(val / 1000);\r\n        unit = 'K+';\r\n    } else if (val >= 1000000 && val < 10000000000) {\r\n        endVal = parseInt(val / 1000000);\r\n        unit = 'M+';\r\n    } else {\r\n        endVal = parseInt(val / 1000000000);\r\n        unit = 'B+';\r\n    }\r\n    return {\r\n        val: endVal,\r\n        unit: unit\r\n    };\r\n}\r\n\r\nexport default {\r\n    data () {\r\n        return {\r\n            unit: '',\r\n            demo: {}\r\n        };\r\n    },\r\n    name: 'countUp',\r\n    props: {\r\n        idName: String,\r\n        className: String,\r\n        startVal: {\r\n            type: Number,\r\n            default: 0\r\n        },\r\n        endVal: {\r\n            type: Number,\r\n            required: true\r\n        },\r\n        decimals: {\r\n            type: Number,\r\n            default: 0\r\n        },\r\n        duration: {\r\n            type: Number,\r\n            default: 2\r\n        },\r\n        delay: {\r\n            type: Number,\r\n            default: 500\r\n        },\r\n        options: {\r\n            type: Object,\r\n            default: () => {\r\n                return {\r\n                    useEasing: true,\r\n                    useGrouping: true,\r\n                    separator: ',',\r\n                    decimal: '.'\r\n                };\r\n            }\r\n        },\r\n        color: String,\r\n        countSize: {\r\n            type: String,\r\n            default: '30px'\r\n        },\r\n        countWeight: {\r\n            type: Number,\r\n            default: 700\r\n        },\r\n        introText: [String, Number]\r\n    },\r\n    mounted () {\r\n        this.$nextTick(() => {\r\n            setTimeout(() => {\r\n                let res = transformValue(this.endVal);\r\n                let endVal = res.val;\r\n                this.unit = res.unit;\r\n                let demo = {};\r\n                this.demo = demo = new CountUp(this.idName, this.startVal, endVal, this.decimals, this.duration, this.options);\r\n                if (!demo.error) {\r\n                    demo.start();\r\n                }\r\n            }, this.delay);\r\n        });\r\n    },\r\n    watch: {\r\n        endVal (val) {\r\n            let res = transformValue(val);\r\n            let endVal = res.val;\r\n            this.unit = res.unit;\r\n            this.demo.update(endVal);\r\n        }\r\n    }\r\n};\r\n",{"version":3,"sources":["countUp.vue"],"names":[],"mappings":";;;;;;;;AAQA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"countUp.vue","sourceRoot":"src/views/home/components","sourcesContent":["<template>\r\n    <div>\r\n        <p :class=\"className\" :style=\"{textAlign: 'center', color: color, fontSize: countSize, fontWeight: countWeight}\"><span v-cloak :id=\"idName\">{{ startVal }}</span><span>{{ unit }}</span></p>\r\n        <slot name=\"intro\"></slot>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nimport CountUp from 'countup';\r\n\r\nfunction transformValue (val) {\r\n    let endVal = 0;\r\n    let unit = '';\r\n    if (val < 1000) {\r\n        endVal = val;\r\n    } else if (val >= 1000 && val < 1000000) {\r\n        endVal = parseInt(val / 1000);\r\n        unit = 'K+';\r\n    } else if (val >= 1000000 && val < 10000000000) {\r\n        endVal = parseInt(val / 1000000);\r\n        unit = 'M+';\r\n    } else {\r\n        endVal = parseInt(val / 1000000000);\r\n        unit = 'B+';\r\n    }\r\n    return {\r\n        val: endVal,\r\n        unit: unit\r\n    };\r\n}\r\n\r\nexport default {\r\n    data () {\r\n        return {\r\n            unit: '',\r\n            demo: {}\r\n        };\r\n    },\r\n    name: 'countUp',\r\n    props: {\r\n        idName: String,\r\n        className: String,\r\n        startVal: {\r\n            type: Number,\r\n            default: 0\r\n        },\r\n        endVal: {\r\n            type: Number,\r\n            required: true\r\n        },\r\n        decimals: {\r\n            type: Number,\r\n            default: 0\r\n        },\r\n        duration: {\r\n            type: Number,\r\n            default: 2\r\n        },\r\n        delay: {\r\n            type: Number,\r\n            default: 500\r\n        },\r\n        options: {\r\n            type: Object,\r\n            default: () => {\r\n                return {\r\n                    useEasing: true,\r\n                    useGrouping: true,\r\n                    separator: ',',\r\n                    decimal: '.'\r\n                };\r\n            }\r\n        },\r\n        color: String,\r\n        countSize: {\r\n            type: String,\r\n            default: '30px'\r\n        },\r\n        countWeight: {\r\n            type: Number,\r\n            default: 700\r\n        },\r\n        introText: [String, Number]\r\n    },\r\n    mounted () {\r\n        this.$nextTick(() => {\r\n            setTimeout(() => {\r\n                let res = transformValue(this.endVal);\r\n                let endVal = res.val;\r\n                this.unit = res.unit;\r\n                let demo = {};\r\n                this.demo = demo = new CountUp(this.idName, this.startVal, endVal, this.decimals, this.duration, this.options);\r\n                if (!demo.error) {\r\n                    demo.start();\r\n                }\r\n            }, this.delay);\r\n        });\r\n    },\r\n    watch: {\r\n        endVal (val) {\r\n            let res = transformValue(val);\r\n            let endVal = res.val;\r\n            this.unit = res.unit;\r\n            this.demo.update(endVal);\r\n        }\r\n    }\r\n};\r\n</script>\r\n"]}]}