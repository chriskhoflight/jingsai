{"remainingRequest":"D:\\jingsai\\rcms_src\\rcms-pc-web\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\jingsai\\rcms_src\\rcms-pc-web\\src\\views\\sys\\redis\\redisMonitor.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\jingsai\\rcms_src\\rcms-pc-web\\src\\views\\sys\\redis\\redisMonitor.vue","mtime":1564969187236},{"path":"D:\\jingsai\\rcms_src\\rcms-pc-web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\jingsai\\rcms_src\\rcms-pc-web\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\jingsai\\rcms_src\\rcms-pc-web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\jingsai\\rcms_src\\rcms-pc-web\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nimport { getRedisKeySize, getRedisMemory, getRedisInfo } from \"@/api/index\";\r\nexport default {\r\n  name: \"redisMonitor\",\r\n  data() {\r\n    return {\r\n      memory: {\r\n        series: [],\r\n        chartOptions: {\r\n          chart: {\r\n            animations: {\r\n              enabled: true,\r\n              easing: \"linear\",\r\n              dynamicAnimation: {\r\n                speed: 5000\r\n              }\r\n            },\r\n            toolbar: {\r\n              show: false\r\n            },\r\n            zoom: {\r\n              enabled: false\r\n            }\r\n          },\r\n          dataLabels: {\r\n            enabled: false\r\n          },\r\n          stroke: {\r\n            curve: \"smooth\"\r\n          },\r\n          title: {\r\n            text: \"Redis内存实时占用情况（KB）\",\r\n            align: \"left\"\r\n          },\r\n          markers: {\r\n            size: 0\r\n          },\r\n          xaxis: {},\r\n          yaxis: {},\r\n          legend: {\r\n            show: false\r\n          }\r\n        },\r\n        data: [],\r\n        xdata: []\r\n      },\r\n      key: {\r\n        series: [],\r\n        chartOptions: {\r\n          chart: {\r\n            animations: {\r\n              enabled: true,\r\n              easing: \"linear\",\r\n              dynamicAnimation: {\r\n                speed: 5000\r\n              }\r\n            },\r\n            toolbar: {\r\n              show: false\r\n            },\r\n            zoom: {\r\n              enabled: false\r\n            }\r\n          },\r\n          dataLabels: {\r\n            enabled: false\r\n          },\r\n          colors: [\"#f5564e\"],\r\n          stroke: {\r\n            curve: \"smooth\"\r\n          },\r\n          title: {\r\n            text: \"Redis key实时数量（个）\",\r\n            align: \"left\"\r\n          },\r\n          markers: {\r\n            size: 0\r\n          },\r\n          xaxis: {},\r\n          yaxis: {},\r\n          legend: {\r\n            show: false\r\n          }\r\n        },\r\n        data: [],\r\n        xdata: []\r\n      },\r\n      columns: [\r\n        {\r\n          key: \"key\",\r\n          minWidth: 200\r\n        },\r\n        {\r\n          key: \"description\",\r\n          minWidth: 500\r\n        },\r\n        {\r\n          key: \"value\",\r\n          width: 400\r\n        }\r\n      ],\r\n      redisInfo: [],\r\n      timer: null\r\n    };\r\n  },\r\n  methods: {\r\n    init() {\r\n      this.getData();\r\n      this.getInfo();\r\n    },\r\n    // 统计\r\n    getData() {\r\n      let minMemory = 1e10;\r\n      let minSize = 1e10;\r\n      let maxMemory = -1e10;\r\n      let maxSize = -1e10;\r\n      this.timer = setInterval(() => {\r\n        // 内存\r\n        getRedisMemory().then(res => {\r\n          let currentMemory = Number(res.result.memory) / 1024;\r\n          // 更新最大最小值\r\n          if (currentMemory < minMemory) {\r\n            minMemory = currentMemory;\r\n          }\r\n          if (currentMemory > maxMemory) {\r\n            maxMemory = currentMemory;\r\n          }\r\n\r\n          this.memory.data.push(Number(currentMemory.toFixed(2)));\r\n          this.memory.xdata.push(res.result.time);\r\n          // 5个点\r\n          if (this.memory.data.length >= 6) {\r\n            this.memory.data.shift();\r\n            this.memory.xdata.shift();\r\n          }\r\n          // 更新点信息\r\n          this.$refs.memoryInfo.updateSeries([\r\n            {\r\n              name: \"内存(KB)\",\r\n              data: this.memory.data\r\n            }\r\n          ]);\r\n\r\n          // 更新最大最小值\r\n          this.$refs.memoryInfo.updateOptions(\r\n            {\r\n              xaxis: {\r\n                categories: this.memory.xdata\r\n              },\r\n              yaxis: {\r\n                min: minMemory - 2,\r\n                max: maxMemory + 2\r\n              }\r\n            },\r\n            true,\r\n            true\r\n          );\r\n        });\r\n        // 键值\r\n        getRedisKeySize().then(res => {\r\n          let currentSize = res.result.keySize;\r\n          // 更新最大最小值\r\n          if (currentSize < minSize) {\r\n            minSize = currentSize;\r\n          }\r\n          if (currentSize > maxSize) {\r\n            maxSize = currentSize;\r\n          }\r\n\r\n          this.key.data.push(currentSize);\r\n          this.key.xdata.push(res.result.time);\r\n          // 5个点\r\n          if (this.key.data.length >= 6) {\r\n            this.key.data.shift();\r\n            this.key.xdata.shift();\r\n          }\r\n          // 更新点信息\r\n          this.$refs.keySize.updateSeries([\r\n            {\r\n              name: \"key数量\",\r\n              data: this.key.data\r\n            }\r\n          ]);\r\n          // 更新最大最小值\r\n          this.$refs.keySize.updateOptions(\r\n            {\r\n              xaxis: {\r\n                categories: this.key.xdata\r\n              },\r\n              // 避免最大最小值一致\r\n              yaxis: {\r\n                min: minSize - 2,\r\n                max: maxSize + 2\r\n              }\r\n            },\r\n            true,\r\n            true\r\n          );\r\n        });\r\n      }, 5000);\r\n    },\r\n    getInfo() {\r\n      getRedisInfo().then(res => {\r\n        let data = [];\r\n        res.result.forEach(e => {\r\n          if (e.description) {\r\n            data.push(e);\r\n          }\r\n        });\r\n        this.redisInfo = data;\r\n      });\r\n    }\r\n  },\r\n  beforeDestroy() {\r\n    if (this.timer) {\r\n      clearInterval(this.timer);\r\n    }\r\n  },\r\n  mounted() {\r\n    this.init();\r\n  }\r\n};\r\n",{"version":3,"sources":["redisMonitor.vue"],"names":[],"mappingsfile":"redisMonitor.vue","sourceRoot":"src/views/sys/redis","sourcesContent":["<template>\r\n  <div>\r\n    <Row>\r\n      <Col span=\"12\">\r\n        <apexchart\r\n          ref=\"memoryInfo\"\r\n          type=\"area\"\r\n          height=\"350\"\r\n          :options=\"memory.chartOptions\"\r\n          :series=\"memory.series\"\r\n        />\r\n      </Col>\r\n      <Col span=\"12\">\r\n        <apexchart\r\n          ref=\"keySize\"\r\n          type=\"area\"\r\n          height=\"350\"\r\n          :options=\"key.chartOptions\"\r\n          :series=\"key.series\"\r\n        />\r\n      </Col>\r\n    </Row>\r\n    <Row>\r\n      <Divider orientation=\"left\">Redis详细信息</Divider>\r\n      <Table :columns=\"columns\" :data=\"redisInfo\" :show-header=\"false\"></Table>\r\n    </Row>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { getRedisKeySize, getRedisMemory, getRedisInfo } from \"@/api/index\";\r\nexport default {\r\n  name: \"redisMonitor\",\r\n  data() {\r\n    return {\r\n      memory: {\r\n        series: [],\r\n        chartOptions: {\r\n          chart: {\r\n            animations: {\r\n              enabled: true,\r\n              easing: \"linear\",\r\n              dynamicAnimation: {\r\n                speed: 5000\r\n              }\r\n            },\r\n            toolbar: {\r\n              show: false\r\n            },\r\n            zoom: {\r\n              enabled: false\r\n            }\r\n          },\r\n          dataLabels: {\r\n            enabled: false\r\n          },\r\n          stroke: {\r\n            curve: \"smooth\"\r\n          },\r\n          title: {\r\n            text: \"Redis内存实时占用情况（KB）\",\r\n            align: \"left\"\r\n          },\r\n          markers: {\r\n            size: 0\r\n          },\r\n          xaxis: {},\r\n          yaxis: {},\r\n          legend: {\r\n            show: false\r\n          }\r\n        },\r\n        data: [],\r\n        xdata: []\r\n      },\r\n      key: {\r\n        series: [],\r\n        chartOptions: {\r\n          chart: {\r\n            animations: {\r\n              enabled: true,\r\n              easing: \"linear\",\r\n              dynamicAnimation: {\r\n                speed: 5000\r\n              }\r\n            },\r\n            toolbar: {\r\n              show: false\r\n            },\r\n            zoom: {\r\n              enabled: false\r\n            }\r\n          },\r\n          dataLabels: {\r\n            enabled: false\r\n          },\r\n          colors: [\"#f5564e\"],\r\n          stroke: {\r\n            curve: \"smooth\"\r\n          },\r\n          title: {\r\n            text: \"Redis key实时数量（个）\",\r\n            align: \"left\"\r\n          },\r\n          markers: {\r\n            size: 0\r\n          },\r\n          xaxis: {},\r\n          yaxis: {},\r\n          legend: {\r\n            show: false\r\n          }\r\n        },\r\n        data: [],\r\n        xdata: []\r\n      },\r\n      columns: [\r\n        {\r\n          key: \"key\",\r\n          minWidth: 200\r\n        },\r\n        {\r\n          key: \"description\",\r\n          minWidth: 500\r\n        },\r\n        {\r\n          key: \"value\",\r\n          width: 400\r\n        }\r\n      ],\r\n      redisInfo: [],\r\n      timer: null\r\n    };\r\n  },\r\n  methods: {\r\n    init() {\r\n      this.getData();\r\n      this.getInfo();\r\n    },\r\n    // 统计\r\n    getData() {\r\n      let minMemory = 1e10;\r\n      let minSize = 1e10;\r\n      let maxMemory = -1e10;\r\n      let maxSize = -1e10;\r\n      this.timer = setInterval(() => {\r\n        // 内存\r\n        getRedisMemory().then(res => {\r\n          let currentMemory = Number(res.result.memory) / 1024;\r\n          // 更新最大最小值\r\n          if (currentMemory < minMemory) {\r\n            minMemory = currentMemory;\r\n          }\r\n          if (currentMemory > maxMemory) {\r\n            maxMemory = currentMemory;\r\n          }\r\n\r\n          this.memory.data.push(Number(currentMemory.toFixed(2)));\r\n          this.memory.xdata.push(res.result.time);\r\n          // 5个点\r\n          if (this.memory.data.length >= 6) {\r\n            this.memory.data.shift();\r\n            this.memory.xdata.shift();\r\n          }\r\n          // 更新点信息\r\n          this.$refs.memoryInfo.updateSeries([\r\n            {\r\n              name: \"内存(KB)\",\r\n              data: this.memory.data\r\n            }\r\n          ]);\r\n\r\n          // 更新最大最小值\r\n          this.$refs.memoryInfo.updateOptions(\r\n            {\r\n              xaxis: {\r\n                categories: this.memory.xdata\r\n              },\r\n              yaxis: {\r\n                min: minMemory - 2,\r\n                max: maxMemory + 2\r\n              }\r\n            },\r\n            true,\r\n            true\r\n          );\r\n        });\r\n        // 键值\r\n        getRedisKeySize().then(res => {\r\n          let currentSize = res.result.keySize;\r\n          // 更新最大最小值\r\n          if (currentSize < minSize) {\r\n            minSize = currentSize;\r\n          }\r\n          if (currentSize > maxSize) {\r\n            maxSize = currentSize;\r\n          }\r\n\r\n          this.key.data.push(currentSize);\r\n          this.key.xdata.push(res.result.time);\r\n          // 5个点\r\n          if (this.key.data.length >= 6) {\r\n            this.key.data.shift();\r\n            this.key.xdata.shift();\r\n          }\r\n          // 更新点信息\r\n          this.$refs.keySize.updateSeries([\r\n            {\r\n              name: \"key数量\",\r\n              data: this.key.data\r\n            }\r\n          ]);\r\n          // 更新最大最小值\r\n          this.$refs.keySize.updateOptions(\r\n            {\r\n              xaxis: {\r\n                categories: this.key.xdata\r\n              },\r\n              // 避免最大最小值一致\r\n              yaxis: {\r\n                min: minSize - 2,\r\n                max: maxSize + 2\r\n              }\r\n            },\r\n            true,\r\n            true\r\n          );\r\n        });\r\n      }, 5000);\r\n    },\r\n    getInfo() {\r\n      getRedisInfo().then(res => {\r\n        let data = [];\r\n        res.result.forEach(e => {\r\n          if (e.description) {\r\n            data.push(e);\r\n          }\r\n        });\r\n        this.redisInfo = data;\r\n      });\r\n    }\r\n  },\r\n  beforeDestroy() {\r\n    if (this.timer) {\r\n      clearInterval(this.timer);\r\n    }\r\n  },\r\n  mounted() {\r\n    this.init();\r\n  }\r\n};\r\n</script>\r\n<style lang=\"less\">\r\n</style>"]}]}