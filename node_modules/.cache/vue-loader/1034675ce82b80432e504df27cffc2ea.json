{"remainingRequest":"D:\\jingsai\\rcms_src\\rcms-pc-web\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\jingsai\\rcms_src\\rcms-pc-web\\src\\views\\components\\fullscreen.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\jingsai\\rcms_src\\rcms-pc-web\\src\\views\\components\\fullscreen.vue","mtime":1564969187189},{"path":"D:\\jingsai\\rcms_src\\rcms-pc-web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\jingsai\\rcms_src\\rcms-pc-web\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\jingsai\\rcms_src\\rcms-pc-web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\jingsai\\rcms_src\\rcms-pc-web\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n\r\nexport default {\r\n  name: \"fullScreen\",\r\n  props: {\r\n    value: {\r\n      type: Boolean,\r\n      default: false\r\n    }\r\n  },\r\n  computed: {\r\n    showFullScreenBtn() {\r\n      return window.navigator.userAgent.indexOf(\"MSIE\") < 0;\r\n    }\r\n  },\r\n  methods: {\r\n    handleFullscreen() {\r\n      let main = document.body;\r\n      if (this.value) {\r\n        if (document.exitFullscreen) {\r\n          document.exitFullscreen();\r\n        } else if (document.mozCancelFullScreen) {\r\n          document.mozCancelFullScreen();\r\n        } else if (document.webkitCancelFullScreen) {\r\n          document.webkitCancelFullScreen();\r\n        } else if (document.msExitFullscreen) {\r\n          document.msExitFullscreen();\r\n        }\r\n      } else {\r\n        if (main.requestFullscreen) {\r\n          main.requestFullscreen();\r\n        } else if (main.mozRequestFullScreen) {\r\n          main.mozRequestFullScreen();\r\n        } else if (main.webkitRequestFullScreen) {\r\n          main.webkitRequestFullScreen();\r\n        } else if (main.msRequestFullscreen) {\r\n          main.msRequestFullscreen();\r\n        }\r\n      }\r\n    },\r\n    handleChange() {\r\n      this.handleFullscreen();\r\n    }\r\n  },\r\n  created() {\r\n    let isFullscreen =\r\n      document.fullscreenElement ||\r\n      document.mozFullScreenElement ||\r\n      document.webkitFullscreenElement ||\r\n      document.fullScreen ||\r\n      document.mozFullScreen ||\r\n      document.webkitIsFullScreen;\r\n    isFullscreen = !!isFullscreen;\r\n    document.addEventListener(\"fullscreenchange\", () => {\r\n      this.$emit(\"input\", !this.value);\r\n      this.$emit(\"on-change\", !this.value);\r\n    });\r\n    document.addEventListener(\"mozfullscreenchange\", () => {\r\n      this.$emit(\"input\", !this.value);\r\n      this.$emit(\"on-change\", !this.value);\r\n    });\r\n    document.addEventListener(\"webkitfullscreenchange\", () => {\r\n      this.$emit(\"input\", !this.value);\r\n      this.$emit(\"on-change\", !this.value);\r\n    });\r\n    document.addEventListener(\"msfullscreenchange\", () => {\r\n      this.$emit(\"input\", !this.value);\r\n      this.$emit(\"on-change\", !this.value);\r\n    });\r\n    this.$emit(\"input\", isFullscreen);\r\n  }\r\n};\r\n",{"version":3,"sources":["fullscreen.vue"],"names":[],"mappings":";;;;;;;;;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"fullscreen.vue","sourceRoot":"src/views/components","sourcesContent":["<template>\r\n    <div @click=\"handleChange\" v-if=\"showFullScreenBtn\" class=\"full-screen-btn-con\">\r\n        <Tooltip transfer :content=\"value ? '退出全屏' : '全屏'\" placement=\"bottom\">\r\n            <Icon :type=\"value ? 'ios-contract' : 'ios-expand'\" :size=\"23\"></Icon>\r\n        </Tooltip>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  name: \"fullScreen\",\r\n  props: {\r\n    value: {\r\n      type: Boolean,\r\n      default: false\r\n    }\r\n  },\r\n  computed: {\r\n    showFullScreenBtn() {\r\n      return window.navigator.userAgent.indexOf(\"MSIE\") < 0;\r\n    }\r\n  },\r\n  methods: {\r\n    handleFullscreen() {\r\n      let main = document.body;\r\n      if (this.value) {\r\n        if (document.exitFullscreen) {\r\n          document.exitFullscreen();\r\n        } else if (document.mozCancelFullScreen) {\r\n          document.mozCancelFullScreen();\r\n        } else if (document.webkitCancelFullScreen) {\r\n          document.webkitCancelFullScreen();\r\n        } else if (document.msExitFullscreen) {\r\n          document.msExitFullscreen();\r\n        }\r\n      } else {\r\n        if (main.requestFullscreen) {\r\n          main.requestFullscreen();\r\n        } else if (main.mozRequestFullScreen) {\r\n          main.mozRequestFullScreen();\r\n        } else if (main.webkitRequestFullScreen) {\r\n          main.webkitRequestFullScreen();\r\n        } else if (main.msRequestFullscreen) {\r\n          main.msRequestFullscreen();\r\n        }\r\n      }\r\n    },\r\n    handleChange() {\r\n      this.handleFullscreen();\r\n    }\r\n  },\r\n  created() {\r\n    let isFullscreen =\r\n      document.fullscreenElement ||\r\n      document.mozFullScreenElement ||\r\n      document.webkitFullscreenElement ||\r\n      document.fullScreen ||\r\n      document.mozFullScreen ||\r\n      document.webkitIsFullScreen;\r\n    isFullscreen = !!isFullscreen;\r\n    document.addEventListener(\"fullscreenchange\", () => {\r\n      this.$emit(\"input\", !this.value);\r\n      this.$emit(\"on-change\", !this.value);\r\n    });\r\n    document.addEventListener(\"mozfullscreenchange\", () => {\r\n      this.$emit(\"input\", !this.value);\r\n      this.$emit(\"on-change\", !this.value);\r\n    });\r\n    document.addEventListener(\"webkitfullscreenchange\", () => {\r\n      this.$emit(\"input\", !this.value);\r\n      this.$emit(\"on-change\", !this.value);\r\n    });\r\n    document.addEventListener(\"msfullscreenchange\", () => {\r\n      this.$emit(\"input\", !this.value);\r\n      this.$emit(\"on-change\", !this.value);\r\n    });\r\n    this.$emit(\"input\", isFullscreen);\r\n  }\r\n};\r\n</script>\r\n"]}]}