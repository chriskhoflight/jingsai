{"remainingRequest":"F:\\gitProject\\rcms_src\\rcms-pc-web\\node_modules\\babel-loader\\lib\\index.js!F:\\gitProject\\rcms_src\\rcms-pc-web\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!F:\\gitProject\\rcms_src\\rcms-pc-web\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!F:\\gitProject\\rcms_src\\rcms-pc-web\\src\\views\\home\\components\\countUp.vue?vue&type=script&lang=js&","dependencies":[{"path":"F:\\gitProject\\rcms_src\\rcms-pc-web\\src\\views\\home\\components\\countUp.vue","mtime":1564969187205},{"path":"F:\\gitProject\\rcms_src\\rcms-pc-web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"F:\\gitProject\\rcms_src\\rcms-pc-web\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"F:\\gitProject\\rcms_src\\rcms-pc-web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"F:\\gitProject\\rcms_src\\rcms-pc-web\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _countup = _interopRequireDefault(require(\"countup\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n//\n//\n//\n//\n//\n//\n//\nfunction transformValue(val) {\n  var endVal = 0;\n  var unit = '';\n\n  if (val < 1000) {\n    endVal = val;\n  } else if (val >= 1000 && val < 1000000) {\n    endVal = parseInt(val / 1000);\n    unit = 'K+';\n  } else if (val >= 1000000 && val < 10000000000) {\n    endVal = parseInt(val / 1000000);\n    unit = 'M+';\n  } else {\n    endVal = parseInt(val / 1000000000);\n    unit = 'B+';\n  }\n\n  return {\n    val: endVal,\n    unit: unit\n  };\n}\n\nvar _default2 = {\n  data: function data() {\n    return {\n      unit: '',\n      demo: {}\n    };\n  },\n  name: 'countUp',\n  props: {\n    idName: String,\n    className: String,\n    startVal: {\n      type: Number,\n      default: 0\n    },\n    endVal: {\n      type: Number,\n      required: true\n    },\n    decimals: {\n      type: Number,\n      default: 0\n    },\n    duration: {\n      type: Number,\n      default: 2\n    },\n    delay: {\n      type: Number,\n      default: 500\n    },\n    options: {\n      type: Object,\n      default: function _default() {\n        return {\n          useEasing: true,\n          useGrouping: true,\n          separator: ',',\n          decimal: '.'\n        };\n      }\n    },\n    color: String,\n    countSize: {\n      type: String,\n      default: '30px'\n    },\n    countWeight: {\n      type: Number,\n      default: 700\n    },\n    introText: [String, Number]\n  },\n  mounted: function mounted() {\n    var _this = this;\n\n    this.$nextTick(function () {\n      setTimeout(function () {\n        var res = transformValue(_this.endVal);\n        var endVal = res.val;\n        _this.unit = res.unit;\n        var demo = {};\n        _this.demo = demo = new _countup.default(_this.idName, _this.startVal, endVal, _this.decimals, _this.duration, _this.options);\n\n        if (!demo.error) {\n          demo.start();\n        }\n      }, _this.delay);\n    });\n  },\n  watch: {\n    endVal: function endVal(val) {\n      var res = transformValue(val);\n      var endVal = res.val;\n      this.unit = res.unit;\n      this.demo.update(endVal);\n    }\n  }\n};\nexports.default = _default2;",{"version":3,"sources":["countUp.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\r\n    <div>\r\n        <p :class=\"className\" :style=\"{textAlign: 'center', color: color, fontSize: countSize, fontWeight: countWeight}\"><span v-cloak :id=\"idName\">{{ startVal }}</span><span>{{ unit }}</span></p>\r\n        <slot name=\"intro\"></slot>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nimport CountUp from 'countup';\r\n\r\nfunction transformValue (val) {\r\n    let endVal = 0;\r\n    let unit = '';\r\n    if (val < 1000) {\r\n        endVal = val;\r\n    } else if (val >= 1000 && val < 1000000) {\r\n        endVal = parseInt(val / 1000);\r\n        unit = 'K+';\r\n    } else if (val >= 1000000 && val < 10000000000) {\r\n        endVal = parseInt(val / 1000000);\r\n        unit = 'M+';\r\n    } else {\r\n        endVal = parseInt(val / 1000000000);\r\n        unit = 'B+';\r\n    }\r\n    return {\r\n        val: endVal,\r\n        unit: unit\r\n    };\r\n}\r\n\r\nexport default {\r\n    data () {\r\n        return {\r\n            unit: '',\r\n            demo: {}\r\n        };\r\n    },\r\n    name: 'countUp',\r\n    props: {\r\n        idName: String,\r\n        className: String,\r\n        startVal: {\r\n            type: Number,\r\n            default: 0\r\n        },\r\n        endVal: {\r\n            type: Number,\r\n            required: true\r\n        },\r\n        decimals: {\r\n            type: Number,\r\n            default: 0\r\n        },\r\n        duration: {\r\n            type: Number,\r\n            default: 2\r\n        },\r\n        delay: {\r\n            type: Number,\r\n            default: 500\r\n        },\r\n        options: {\r\n            type: Object,\r\n            default: () => {\r\n                return {\r\n                    useEasing: true,\r\n                    useGrouping: true,\r\n                    separator: ',',\r\n                    decimal: '.'\r\n                };\r\n            }\r\n        },\r\n        color: String,\r\n        countSize: {\r\n            type: String,\r\n            default: '30px'\r\n        },\r\n        countWeight: {\r\n            type: Number,\r\n            default: 700\r\n        },\r\n        introText: [String, Number]\r\n    },\r\n    mounted () {\r\n        this.$nextTick(() => {\r\n            setTimeout(() => {\r\n                let res = transformValue(this.endVal);\r\n                let endVal = res.val;\r\n                this.unit = res.unit;\r\n                let demo = {};\r\n                this.demo = demo = new CountUp(this.idName, this.startVal, endVal, this.decimals, this.duration, this.options);\r\n                if (!demo.error) {\r\n                    demo.start();\r\n                }\r\n            }, this.delay);\r\n        });\r\n    },\r\n    watch: {\r\n        endVal (val) {\r\n            let res = transformValue(val);\r\n            let endVal = res.val;\r\n            this.unit = res.unit;\r\n            this.demo.update(endVal);\r\n        }\r\n    }\r\n};\r\n</script>\r\n"],"sourceRoot":"src/views/home/components"}]}