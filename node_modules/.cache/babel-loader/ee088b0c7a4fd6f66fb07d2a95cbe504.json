{"remainingRequest":"D:\\jingsai\\rcms_src\\rcms-pc-web\\node_modules\\thread-loader\\dist\\cjs.js!D:\\jingsai\\rcms_src\\rcms-pc-web\\node_modules\\babel-loader\\lib\\index.js!D:\\jingsai\\rcms_src\\rcms-pc-web\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\jingsai\\rcms_src\\rcms-pc-web\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\jingsai\\rcms_src\\rcms-pc-web\\src\\views\\wechat\\custom-menu\\customMenu.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\jingsai\\rcms_src\\rcms-pc-web\\src\\views\\wechat\\custom-menu\\customMenu.vue","mtime":1564969187252},{"path":"D:\\jingsai\\rcms_src\\rcms-pc-web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\jingsai\\rcms_src\\rcms-pc-web\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\jingsai\\rcms_src\\rcms-pc-web\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\jingsai\\rcms_src\\rcms-pc-web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\jingsai\\rcms_src\\rcms-pc-web\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { getMenuTreeByTemplateId, addMenuTemplateDetail, editMenuTemplateDetail, delMenuTemplateDetail } from \"@/api/wechat\";\nimport { getDictDataByType } from \"@/api/index\";\nimport { debug } from 'util';\nexport default {\n  data: function data() {\n    var _this = this;\n\n    //类型验证\n    var validateType = function validateType(rule, value, callback) {\n      var self = _this; //二级菜单,类型必须填\n\n      if (self.form.parentId != '0') {\n        if (value == null || value == undefined || value == \"\") {\n          callback(new Error('请选择菜单类型'));\n        } else {\n          callback();\n        }\n      } else {\n        callback();\n      }\n    }; //url验证\n\n\n    var validateUrl = function validateUrl(rule, value, callback) {\n      var self = _this; //类型为网页类型， url必须填\n\n      if ('view' == self.form.type) {\n        if (value == null || value == undefined || value == \"\") {\n          callback(new Error('请输入网页链接'));\n        } else {\n          callback();\n        }\n      } else {\n        callback();\n      }\n    }; //menuKey验证\n\n\n    var validateMenuKey = function validateMenuKey(rule, value, callback) {\n      var self = _this; //类型为点击， menuKey必须填\n\n      if ('click' == self.form.type) {\n        if (value == null || value == undefined || value == \"\") {\n          callback(new Error('请输入菜单KEY值'));\n        } else {\n          callback();\n        }\n      } else {\n        callback();\n      }\n    }; //AppId验证\n\n\n    var validateAppId = function validateAppId(rule, value, callback) {\n      var self = _this; //类型为小程序， menuKey必须填\n\n      if ('miniprogram' == self.form.type) {\n        if (value == null || value == undefined || value == \"\") {\n          callback(new Error('请输入小程序AppId'));\n        } else {\n          callback();\n        }\n      } else {\n        callback();\n      }\n    }; //AppId验证\n\n\n    var validatePagePath = function validatePagePath(rule, value, callback) {\n      var self = _this; //类型为小程序， menuKey必须填\n\n      if ('miniprogram' == self.form.type) {\n        if (value == null || value == undefined || value == \"\") {\n          callback(new Error('请输入小程序页面路径'));\n        } else {\n          callback();\n        }\n      } else {\n        callback();\n      }\n    };\n\n    return {\n      menuTemplate: {\n        id: '',\n        name: ''\n      },\n      loading: false,\n      // 树加载状态\n      maxHeight: \"500px\",\n      strict: true,\n      loadingEdit: false,\n      // 编辑上级树加载状态\n      modalVisible: false,\n      // 添加显示\n      selectList: [],\n      // 多选数据\n      selectCount: 0,\n      // 多选计数\n      showParent: false,\n      // 显示上级标识\n      modalTitle: \"\",\n      // 添加标题\n      editTitle: \"\",\n      // 编辑菜单名称\n      searchKey: \"\",\n      // 搜索树\n      form: {\n        templateId: \"\",\n        // 编辑对象初始化数据\n        id: \"\",\n        title: \"\",\n        parentId: \"\",\n        parenttitle: \"\",\n        type: \"\",\n        url: \"\",\n        menuKey: \"\",\n        appId: \"\",\n        pagePath: \"\",\n        sortOrder: 0,\n        status: 0\n      },\n      formAdd: {// 添加对象初始化数据\n      },\n      formValidate: {\n        // 表单验证规则//2、一级菜单最多4个汉字，二级菜单最多7个汉字，多出来的部分将会以“...”代替。\n        title: [{\n          required: true,\n          message: \"菜单名称不能为空\",\n          trigger: \"blur\"\n        }, {\n          type: 'string',\n          max: 7,\n          message: '菜单最多7个汉字',\n          trigger: 'blur'\n        }],\n        type: [_defineProperty({\n          validator: validateType,\n          trigger: 'blur'\n        }, \"trigger\", 'change')],\n        url: [_defineProperty({\n          validator: validateUrl,\n          trigger: 'blur'\n        }, \"trigger\", 'change')],\n        menuKey: [_defineProperty({\n          validator: validateMenuKey,\n          trigger: 'blur'\n        }, \"trigger\", 'change')],\n        appId: [_defineProperty({\n          validator: validateAppId,\n          trigger: 'blur'\n        }, \"trigger\", 'change')],\n        pagePath: [_defineProperty({\n          validator: validatePagePath,\n          trigger: 'blur'\n        }, \"trigger\", 'change')]\n      },\n      submitLoading: false,\n      data: [],\n      dataEdit: [],\n      //数字字段\n      dictAccountMenuType: []\n    };\n  },\n  methods: {\n    init: function init() {\n      // 初始化菜单树\n      this.getParentList();\n      this.getDictAccountMenuTypeData();\n    },\n    //加载数字字典\n    getDictAccountMenuTypeData: function getDictAccountMenuTypeData() {\n      var _this2 = this;\n\n      // 获取性别字典数据\n      getDictDataByType(\"wx_account_menu_type\").then(function (res) {\n        if (res.success) {\n          _this2.dictAccountMenuType = res.result;\n        }\n      });\n    },\n    //获取菜单树\n    getParentList: function getParentList() {\n      var _this3 = this;\n\n      getMenuTreeByTemplateId(this.menuTemplate.id).then(function (res) {\n        if (res.success) {\n          _this3.data = res.result;\n        }\n      });\n    },\n    loadData: function loadData(item, callback) {},\n    search: function search() {\n      // 搜索树\n      if (this.searchKey) {\n        // 模拟请求\n        // this.loading = true;\n        // this.getRequest(\"搜索请求路径\", { title: this.searchKey }).then(res => {\n        //   this.loading = false;\n        //   if (res.success === true) {\n        //     this.data = res.result;\n        //   }\n        // });\n        // 模拟请求成功\n        this.data = [{\n          title: \"这里需要请求后台接口\",\n          id: \"1\",\n          parentId: \"0\",\n          parentTitle: \"一级菜单\",\n          status: 0\n        }, {\n          title: \"所以这里是假数据\",\n          id: \"4\",\n          parentId: \"0\",\n          parentTitle: \"一级菜单\",\n          status: 0\n        }, {\n          title: \"我是被禁用的菜单\",\n          id: \"5\",\n          parentId: \"0\",\n          parentTitle: \"一级菜单\",\n          status: -1\n        }];\n      } else {\n        // 为空重新加载\n        this.getParentList();\n      }\n    },\n    //选择树事件\n    selectTree: function selectTree(v) {\n      if (v.length > 0) {\n        // 转换null为\"\"\n        for (var attr in v[0]) {\n          if (v[0][attr] === null) {\n            v[0][attr] = \"\";\n          }\n        }\n\n        var str = JSON.stringify(v[0]);\n        var data = JSON.parse(str);\n        this.form = data;\n        this.editTitle = data.title;\n      } else {\n        this.cancelEdit();\n      }\n    },\n    //编辑取消按钮\n    cancelEdit: function cancelEdit() {\n      var data = this.$refs.tree.getSelectedNodes()[0];\n\n      if (data) {\n        data.selected = false;\n      }\n\n      this.$refs.form.resetFields();\n      delete this.form.id;\n      this.editTitle = \"\";\n    },\n    //选择编辑\n    selectTreeEdit: function selectTreeEdit(v) {\n      if (v.length > 0) {\n        // 转换null为\"\"\n        for (var attr in v[0]) {\n          if (v[0][attr] === null) {\n            v[0][attr] = \"\";\n          }\n        }\n\n        var str = JSON.stringify(v[0]);\n        var data = JSON.parse(str);\n        this.form.parentId = data.id;\n        this.form.parentTitle = data.title;\n      }\n    },\n    //重置\n    handleReset: function handleReset() {\n      this.$refs.form.resetFields();\n      this.form.status = 0;\n    },\n    //编辑提交\n    submitEdit: function submitEdit() {\n      var _this4 = this;\n\n      this.$refs.form.validate(function (valid) {\n        if (valid) {\n          if (!_this4.form.id) {\n            _this4.$Message.warning(\"请先点击选择要修改的菜单\");\n\n            return;\n          }\n\n          _this4.submitLoading = true;\n          editMenuTemplateDetail(_this4.form).then(function (res) {\n            _this4.submitLoading = false;\n\n            if (res.success === true) {\n              _this4.$Message.success(res.message);\n\n              _this4.init();\n\n              _this4.modalVisible = false;\n            }\n          });\n          _this4.submitLoading = false;\n        }\n      });\n    },\n    //新增提交\n    submitAdd: function submitAdd() {\n      var _this5 = this;\n\n      this.$refs.formAdd.validate(function (valid) {\n        if (valid) {\n          _this5.submitLoading = true;\n          addMenuTemplateDetail(_this5.formAdd).then(function (res) {\n            _this5.submitLoading = false;\n\n            if (res.success === true) {\n              _this5.$Message.success(res.message);\n\n              _this5.init();\n\n              _this5.modalVisible = false;\n            }\n          });\n          _this5.submitLoading = false;\n        }\n      });\n    },\n    //新增\n    add: function add() {\n      if (this.form.id == \"\" || this.form.id == null) {\n        this.$Message.warning(\"请先点击选择一个菜单\");\n        return;\n      }\n\n      if (this.form.parentId != \"\" && this.form.parentId != null && this.form.parentId != \"0\") {\n        this.$Message.warning(\"自定义菜单只支持到二级\");\n        return;\n      }\n\n      if (this.form.type != \"\" && this.form.type != null) {\n        this.$Message.warning(\"已选择菜单类型的不能包含二级菜单\");\n        return;\n      }\n\n      if (this.validChildCount()) {\n        this.$Message.warning(\"每个一级菜单最多包含5个二级菜单\");\n        return;\n      }\n\n      this.modalTitle = \"添加子菜单\";\n      this.showParent = true;\n      this.formAdd = {\n        templateId: this.menuTemplate.id,\n        parentId: this.form.id,\n        sortOrder: 0,\n        status: 0\n      };\n      this.modalVisible = true;\n    },\n    //新增根节点\n    addRoot: function addRoot() {\n      if (this.validRootCount()) {\n        this.$Message.warning(\"自定义菜单最多包括3个一级菜单\");\n        return;\n      }\n\n      this.modalTitle = \"添加一级菜单\";\n      this.showParent = false;\n      this.formAdd = {\n        templateId: this.menuTemplate.id,\n        parentId: 0,\n        sortOrder: 0,\n        status: 0\n      };\n      this.modalVisible = true;\n    },\n    //验证一级菜单个数\n    //1、自定义菜单最多包括3个一级菜单，每个一级菜单最多包含5个二级菜单。\n    validRootCount: function validRootCount() {\n      if (null != this.data && this.data.length >= 3) {\n        return true;\n      }\n    },\n    //验证二级菜单个数\n    //1、自定义菜单最多包括3个一级菜单，每个一级菜单最多包含5个二级菜单。\n    validChildCount: function validChildCount(parentId) {\n      if (null != this.form && this.form.children.length >= 5) {\n        return true;\n      }\n    },\n    changeSelect: function changeSelect(v) {\n      this.selectCount = v.length;\n      this.selectList = v;\n    },\n    //批量删除\n    delAll: function delAll() {\n      var _this6 = this;\n\n      if (this.selectCount <= 0) {\n        this.$Message.warning(\"您还未勾选要删除的数据\");\n        return;\n      }\n\n      this.$Modal.confirm({\n        title: \"确认删除\",\n        content: \"您确认要删除所选的 \" + this.selectCount + \" 条数据?\",\n        onOk: function onOk() {\n          var ids = \"\";\n\n          _this6.selectList.forEach(function (e) {\n            ids += e.id + \",\";\n          });\n\n          ids = ids.substring(0, ids.length - 1);\n          delMenuTemplateDetail(ids).then(function (res) {\n            if (res.success === true) {\n              _this6.$Message.success(\"删除成功\");\n\n              _this6.selectList = [];\n              _this6.selectCount = 0;\n\n              _this6.cancelEdit();\n\n              _this6.init();\n            }\n          });\n        }\n      });\n    }\n  },\n  mounted: function mounted() {\n    // 计算高度\n    var height = document.documentElement.clientHeight;\n    this.maxHeight = Number(height - 287) + \"px\";\n    this.menuTemplate.id = this.$route.query.id;\n    this.menuTemplate.name = this.$route.query.name;\n    this.init();\n  }\n};",null]}