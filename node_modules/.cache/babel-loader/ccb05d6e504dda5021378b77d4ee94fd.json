{"remainingRequest":"D:\\jingsai\\rcms_src\\rcms-pc-web\\node_modules\\thread-loader\\dist\\cjs.js!D:\\jingsai\\rcms_src\\rcms-pc-web\\node_modules\\babel-loader\\lib\\index.js!D:\\jingsai\\rcms_src\\rcms-pc-web\\src\\router\\index.js","dependencies":[{"path":"D:\\jingsai\\rcms_src\\rcms-pc-web\\src\\router\\index.js","mtime":1566349325038},{"path":"D:\\jingsai\\rcms_src\\rcms-pc-web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\jingsai\\rcms_src\\rcms-pc-web\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\jingsai\\rcms_src\\rcms-pc-web\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance\"); }\n\nfunction _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }\n\nimport Vue from 'vue';\nimport iView from 'iview';\nimport Util from '../libs/util';\nimport VueRouter from 'vue-router';\nimport Cookies from 'js-cookie';\nimport { routers, otherRouter } from './router';\nimport store from '../store';\nVue.use(VueRouter); // 路由配置\n\nvar RouterConfig = {\n  // mode: 'history',\n  routes: routers\n};\n\nfunction exportWhiteListFromRouter(router) {\n  var res = [];\n  var _iteratorNormalCompletion = true;\n  var _didIteratorError = false;\n  var _iteratorError = undefined;\n\n  try {\n    for (var _iterator = router[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n      var item = _step.value;\n      res.push(item.path);\n    }\n  } catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion && _iterator.return != null) {\n        _iterator.return();\n      }\n    } finally {\n      if (_didIteratorError) {\n        throw _iteratorError;\n      }\n    }\n  }\n\n  return res;\n} // 路由白名单\n\n\nvar whiteList = exportWhiteListFromRouter(routers);\nexport var router = new VueRouter(RouterConfig);\nrouter.beforeEach(function (to, from, next) {\n  iView.LoadingBar.start();\n  Util.title(to.meta.title);\n\n  if (Cookies.get('locking') === '1' && to.name !== 'locking') {\n    // 判断当前是否是锁定状态\n    next({\n      replace: true,\n      name: 'locking'\n    });\n  } else if (Cookies.get('locking') === '0' && to.name === 'locking') {\n    next(false);\n  } else {\n    // 白名单则跳过，无需登录\n    var first = to.path.indexOf(\"/\") + 1; // 从第一个斜杠算起（+1表示不包括该横杠）\n\n    var tow = to.path.indexOf(\"/\", first); // 第一个斜杠后的第一个横杠（即第二个横杠）\n\n    var parentPath = '';\n\n    if (tow != -1) {\n      parentPath = to.path.substring(0, tow);\n    }\n\n    if (whiteList.indexOf(to.path) != -1 || whiteList.indexOf(parentPath) != -1) {\n      console.log(\"白名单\");\n      next();\n      return;\n    }\n\n    if (!Cookies.get('userInfo') && to.name !== 'login') {\n      // 判断是否已经登录且前往的页面不是登录页\n      // if (!Cookies.get('userInfo') && to.name !== 'login' && to.name !== 'regist' && to.name !== 'regist-result' && to.name !== 'relate') { // 判断是否已经登录且前往的页面不是登录页\n      next({\n        name: 'login'\n      });\n    } else if (Cookies.get('userInfo') && to.name === 'login') {\n      // 判断是否已经登录且前往的是登录页\n      Util.title();\n      next({\n        name: 'home_index'\n      });\n    } else {\n      Util.toDefaultPage(_toConsumableArray(routers), to.name, router, next);\n    }\n  }\n});\nrouter.afterEach(function (to) {\n  Util.openNewPage(router.app, to.name, to.params, to.query);\n  iView.LoadingBar.finish();\n  window.scrollTo(0, 0);\n});",null]}