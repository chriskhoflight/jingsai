{"remainingRequest":"D:\\jingsai\\rcms_src\\rcms-pc-web\\node_modules\\babel-loader\\lib\\index.js!D:\\jingsai\\rcms_src\\rcms-pc-web\\src\\router\\index.js","dependencies":[{"path":"D:\\jingsai\\rcms_src\\rcms-pc-web\\src\\router\\index.js","mtime":1566349325038},{"path":"D:\\jingsai\\rcms_src\\rcms-pc-web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\jingsai\\rcms_src\\rcms-pc-web\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.router = void 0;\n\nvar _vue = _interopRequireDefault(require(\"vue\"));\n\nvar _iview = _interopRequireDefault(require(\"iview\"));\n\nvar _util = _interopRequireDefault(require(\"../libs/util\"));\n\nvar _vueRouter = _interopRequireDefault(require(\"vue-router\"));\n\nvar _jsCookie = _interopRequireDefault(require(\"js-cookie\"));\n\nvar _router = require(\"./router\");\n\nvar _store = _interopRequireDefault(require(\"../store\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance\"); }\n\nfunction _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }\n\n_vue.default.use(_vueRouter.default); // 路由配置\n\n\nvar RouterConfig = {\n  // mode: 'history',\n  routes: _router.routers\n};\n\nfunction exportWhiteListFromRouter(router) {\n  var res = [];\n  var _iteratorNormalCompletion = true;\n  var _didIteratorError = false;\n  var _iteratorError = undefined;\n\n  try {\n    for (var _iterator = router[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n      var item = _step.value;\n      res.push(item.path);\n    }\n  } catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion && _iterator.return != null) {\n        _iterator.return();\n      }\n    } finally {\n      if (_didIteratorError) {\n        throw _iteratorError;\n      }\n    }\n  }\n\n  return res;\n} // 路由白名单\n\n\nvar whiteList = exportWhiteListFromRouter(_router.routers);\nvar router = new _vueRouter.default(RouterConfig);\nexports.router = router;\nrouter.beforeEach(function (to, from, next) {\n  _iview.default.LoadingBar.start();\n\n  _util.default.title(to.meta.title);\n\n  if (_jsCookie.default.get('locking') === '1' && to.name !== 'locking') {\n    // 判断当前是否是锁定状态\n    next({\n      replace: true,\n      name: 'locking'\n    });\n  } else if (_jsCookie.default.get('locking') === '0' && to.name === 'locking') {\n    next(false);\n  } else {\n    // 白名单则跳过，无需登录\n    var first = to.path.indexOf(\"/\") + 1; // 从第一个斜杠算起（+1表示不包括该横杠）\n\n    var tow = to.path.indexOf(\"/\", first); // 第一个斜杠后的第一个横杠（即第二个横杠）\n\n    var parentPath = '';\n\n    if (tow != -1) {\n      parentPath = to.path.substring(0, tow);\n    }\n\n    if (whiteList.indexOf(to.path) != -1 || whiteList.indexOf(parentPath) != -1) {\n      console.log(\"白名单\");\n      next();\n      return;\n    }\n\n    if (!_jsCookie.default.get('userInfo') && to.name !== 'login') {\n      // 判断是否已经登录且前往的页面不是登录页\n      // if (!Cookies.get('userInfo') && to.name !== 'login' && to.name !== 'regist' && to.name !== 'regist-result' && to.name !== 'relate') { // 判断是否已经登录且前往的页面不是登录页\n      next({\n        name: 'login'\n      });\n    } else if (_jsCookie.default.get('userInfo') && to.name === 'login') {\n      // 判断是否已经登录且前往的是登录页\n      _util.default.title();\n\n      next({\n        name: 'home_index'\n      });\n    } else {\n      _util.default.toDefaultPage(_toConsumableArray(_router.routers), to.name, router, next);\n    }\n  }\n});\nrouter.afterEach(function (to) {\n  _util.default.openNewPage(router.app, to.name, to.params, to.query);\n\n  _iview.default.LoadingBar.finish();\n\n  window.scrollTo(0, 0);\n});",{"version":3,"sources":["D:\\jingsai\\rcms_src\\rcms-pc-web\\src\\router\\index.js"],"names":["Vue","use","VueRouter","RouterConfig","routes","routers","exportWhiteListFromRouter","router","res","item","push","path","whiteList","beforeEach","to","from","next","iView","LoadingBar","start","Util","title","meta","Cookies","get","name","replace","first","indexOf","tow","parentPath","substring","console","log","toDefaultPage","afterEach","openNewPage","app","params","query","finish","window","scrollTo"],"mappings":"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","sourcesContent":["import Vue from 'vue';\r\nimport iView from 'iview';\r\nimport Util from '../libs/util';\r\nimport VueRouter from 'vue-router';\r\nimport Cookies from 'js-cookie';\r\nimport { routers, otherRouter } from './router';\r\nimport store from '../store';\r\n\r\nVue.use(VueRouter);\r\n\r\n// 路由配置\r\nconst RouterConfig = {\r\n    // mode: 'history',\r\n    routes: routers\r\n};\r\n\r\nfunction exportWhiteListFromRouter(router){\r\n    let res = []\r\n    for(let item of router)\r\n        res.push(item.path)\r\n    return res\r\n}\r\n\r\n// 路由白名单\r\nconst whiteList = exportWhiteListFromRouter(routers)\r\n\r\nexport const router = new VueRouter(RouterConfig);\r\n\r\nrouter.beforeEach((to, from, next) => {\r\n    iView.LoadingBar.start();\r\n    Util.title(to.meta.title);\r\n    if (Cookies.get('locking') === '1' && to.name !== 'locking') {\r\n        // 判断当前是否是锁定状态\r\n        next({\r\n            replace: true,\r\n            name: 'locking'\r\n        });\r\n    } else if (Cookies.get('locking') === '0' && to.name === 'locking') {\r\n        next(false);\r\n    } else {\r\n        // 白名单则跳过，无需登录\r\n        let first = to.path.indexOf(\"/\") + 1; // 从第一个斜杠算起（+1表示不包括该横杠）\r\n        let tow = to.path.indexOf(\"/\", first); // 第一个斜杠后的第一个横杠（即第二个横杠）\r\n        let parentPath = '';\r\n        if(tow != -1){\r\n            parentPath =  to.path.substring(0,tow)\r\n        }\r\n        if(whiteList.indexOf(to.path) != -1 || whiteList.indexOf(parentPath) != -1){\r\n            console.log(\"白名单\")\r\n            next()\r\n            return\r\n        }\r\n        if (!Cookies.get('userInfo') && to.name !== 'login') { // 判断是否已经登录且前往的页面不是登录页\r\n        // if (!Cookies.get('userInfo') && to.name !== 'login' && to.name !== 'regist' && to.name !== 'regist-result' && to.name !== 'relate') { // 判断是否已经登录且前往的页面不是登录页\r\n            next({\r\n                name: 'login'\r\n            });\r\n        } else if (Cookies.get('userInfo') && to.name === 'login') {\r\n            // 判断是否已经登录且前往的是登录页\r\n            Util.title();\r\n            next({\r\n                name: 'home_index'\r\n            });\r\n        } else {\r\n            Util.toDefaultPage([...routers], to.name, router, next);\r\n        }\r\n    }\r\n});\r\n\r\nrouter.afterEach((to) => {\r\n    Util.openNewPage(router.app, to.name, to.params, to.query);\r\n    iView.LoadingBar.finish();\r\n    window.scrollTo(0, 0);\r\n});\r\n"]}]}