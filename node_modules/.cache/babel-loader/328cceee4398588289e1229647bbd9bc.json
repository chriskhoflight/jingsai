{"remainingRequest":"D:\\jingsai\\rcms_src\\rcms-pc-web\\node_modules\\thread-loader\\dist\\cjs.js!D:\\jingsai\\rcms_src\\rcms-pc-web\\node_modules\\babel-loader\\lib\\index.js!D:\\jingsai\\rcms_src\\rcms-pc-web\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\jingsai\\rcms_src\\rcms-pc-web\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\jingsai\\rcms_src\\rcms-pc-web\\src\\views\\sys\\redis\\redisMonitor.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\jingsai\\rcms_src\\rcms-pc-web\\src\\views\\sys\\redis\\redisMonitor.vue","mtime":1564969187236},{"path":"D:\\jingsai\\rcms_src\\rcms-pc-web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\jingsai\\rcms_src\\rcms-pc-web\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\jingsai\\rcms_src\\rcms-pc-web\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\jingsai\\rcms_src\\rcms-pc-web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\jingsai\\rcms_src\\rcms-pc-web\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { getRedisKeySize, getRedisMemory, getRedisInfo } from \"@/api/index\";\nexport default {\n  name: \"redisMonitor\",\n  data: function data() {\n    return {\n      memory: {\n        series: [],\n        chartOptions: {\n          chart: {\n            animations: {\n              enabled: true,\n              easing: \"linear\",\n              dynamicAnimation: {\n                speed: 5000\n              }\n            },\n            toolbar: {\n              show: false\n            },\n            zoom: {\n              enabled: false\n            }\n          },\n          dataLabels: {\n            enabled: false\n          },\n          stroke: {\n            curve: \"smooth\"\n          },\n          title: {\n            text: \"Redis内存实时占用情况（KB）\",\n            align: \"left\"\n          },\n          markers: {\n            size: 0\n          },\n          xaxis: {},\n          yaxis: {},\n          legend: {\n            show: false\n          }\n        },\n        data: [],\n        xdata: []\n      },\n      key: {\n        series: [],\n        chartOptions: {\n          chart: {\n            animations: {\n              enabled: true,\n              easing: \"linear\",\n              dynamicAnimation: {\n                speed: 5000\n              }\n            },\n            toolbar: {\n              show: false\n            },\n            zoom: {\n              enabled: false\n            }\n          },\n          dataLabels: {\n            enabled: false\n          },\n          colors: [\"#f5564e\"],\n          stroke: {\n            curve: \"smooth\"\n          },\n          title: {\n            text: \"Redis key实时数量（个）\",\n            align: \"left\"\n          },\n          markers: {\n            size: 0\n          },\n          xaxis: {},\n          yaxis: {},\n          legend: {\n            show: false\n          }\n        },\n        data: [],\n        xdata: []\n      },\n      columns: [{\n        key: \"key\",\n        minWidth: 200\n      }, {\n        key: \"description\",\n        minWidth: 500\n      }, {\n        key: \"value\",\n        width: 400\n      }],\n      redisInfo: [],\n      timer: null\n    };\n  },\n  methods: {\n    init: function init() {\n      this.getData();\n      this.getInfo();\n    },\n    // 统计\n    getData: function getData() {\n      var _this = this;\n\n      var minMemory = 1e10;\n      var minSize = 1e10;\n      var maxMemory = -1e10;\n      var maxSize = -1e10;\n      this.timer = setInterval(function () {\n        // 内存\n        getRedisMemory().then(function (res) {\n          var currentMemory = Number(res.result.memory) / 1024; // 更新最大最小值\n\n          if (currentMemory < minMemory) {\n            minMemory = currentMemory;\n          }\n\n          if (currentMemory > maxMemory) {\n            maxMemory = currentMemory;\n          }\n\n          _this.memory.data.push(Number(currentMemory.toFixed(2)));\n\n          _this.memory.xdata.push(res.result.time); // 5个点\n\n\n          if (_this.memory.data.length >= 6) {\n            _this.memory.data.shift();\n\n            _this.memory.xdata.shift();\n          } // 更新点信息\n\n\n          _this.$refs.memoryInfo.updateSeries([{\n            name: \"内存(KB)\",\n            data: _this.memory.data\n          }]); // 更新最大最小值\n\n\n          _this.$refs.memoryInfo.updateOptions({\n            xaxis: {\n              categories: _this.memory.xdata\n            },\n            yaxis: {\n              min: minMemory - 2,\n              max: maxMemory + 2\n            }\n          }, true, true);\n        }); // 键值\n\n        getRedisKeySize().then(function (res) {\n          var currentSize = res.result.keySize; // 更新最大最小值\n\n          if (currentSize < minSize) {\n            minSize = currentSize;\n          }\n\n          if (currentSize > maxSize) {\n            maxSize = currentSize;\n          }\n\n          _this.key.data.push(currentSize);\n\n          _this.key.xdata.push(res.result.time); // 5个点\n\n\n          if (_this.key.data.length >= 6) {\n            _this.key.data.shift();\n\n            _this.key.xdata.shift();\n          } // 更新点信息\n\n\n          _this.$refs.keySize.updateSeries([{\n            name: \"key数量\",\n            data: _this.key.data\n          }]); // 更新最大最小值\n\n\n          _this.$refs.keySize.updateOptions({\n            xaxis: {\n              categories: _this.key.xdata\n            },\n            // 避免最大最小值一致\n            yaxis: {\n              min: minSize - 2,\n              max: maxSize + 2\n            }\n          }, true, true);\n        });\n      }, 5000);\n    },\n    getInfo: function getInfo() {\n      var _this2 = this;\n\n      getRedisInfo().then(function (res) {\n        var data = [];\n        res.result.forEach(function (e) {\n          if (e.description) {\n            data.push(e);\n          }\n        });\n        _this2.redisInfo = data;\n      });\n    }\n  },\n  beforeDestroy: function beforeDestroy() {\n    if (this.timer) {\n      clearInterval(this.timer);\n    }\n  },\n  mounted: function mounted() {\n    this.init();\n  }\n};",null]}