{"remainingRequest":"D:\\jingsai\\rcms_src\\rcms-pc-web\\node_modules\\babel-loader\\lib\\index.js!D:\\jingsai\\rcms_src\\rcms-pc-web\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\jingsai\\rcms_src\\rcms-pc-web\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\jingsai\\rcms_src\\rcms-pc-web\\src\\views\\sys\\redis\\redisMonitor.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\jingsai\\rcms_src\\rcms-pc-web\\src\\views\\sys\\redis\\redisMonitor.vue","mtime":1564969187236},{"path":"D:\\jingsai\\rcms_src\\rcms-pc-web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\jingsai\\rcms_src\\rcms-pc-web\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\jingsai\\rcms_src\\rcms-pc-web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\jingsai\\rcms_src\\rcms-pc-web\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _index = require(\"@/api/index\");\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nvar _default = {\n  name: \"redisMonitor\",\n  data: function data() {\n    return {\n      memory: {\n        series: [],\n        chartOptions: {\n          chart: {\n            animations: {\n              enabled: true,\n              easing: \"linear\",\n              dynamicAnimation: {\n                speed: 5000\n              }\n            },\n            toolbar: {\n              show: false\n            },\n            zoom: {\n              enabled: false\n            }\n          },\n          dataLabels: {\n            enabled: false\n          },\n          stroke: {\n            curve: \"smooth\"\n          },\n          title: {\n            text: \"Redis内存实时占用情况（KB）\",\n            align: \"left\"\n          },\n          markers: {\n            size: 0\n          },\n          xaxis: {},\n          yaxis: {},\n          legend: {\n            show: false\n          }\n        },\n        data: [],\n        xdata: []\n      },\n      key: {\n        series: [],\n        chartOptions: {\n          chart: {\n            animations: {\n              enabled: true,\n              easing: \"linear\",\n              dynamicAnimation: {\n                speed: 5000\n              }\n            },\n            toolbar: {\n              show: false\n            },\n            zoom: {\n              enabled: false\n            }\n          },\n          dataLabels: {\n            enabled: false\n          },\n          colors: [\"#f5564e\"],\n          stroke: {\n            curve: \"smooth\"\n          },\n          title: {\n            text: \"Redis key实时数量（个）\",\n            align: \"left\"\n          },\n          markers: {\n            size: 0\n          },\n          xaxis: {},\n          yaxis: {},\n          legend: {\n            show: false\n          }\n        },\n        data: [],\n        xdata: []\n      },\n      columns: [{\n        key: \"key\",\n        minWidth: 200\n      }, {\n        key: \"description\",\n        minWidth: 500\n      }, {\n        key: \"value\",\n        width: 400\n      }],\n      redisInfo: [],\n      timer: null\n    };\n  },\n  methods: {\n    init: function init() {\n      this.getData();\n      this.getInfo();\n    },\n    // 统计\n    getData: function getData() {\n      var _this = this;\n\n      var minMemory = 1e10;\n      var minSize = 1e10;\n      var maxMemory = -1e10;\n      var maxSize = -1e10;\n      this.timer = setInterval(function () {\n        // 内存\n        (0, _index.getRedisMemory)().then(function (res) {\n          var currentMemory = Number(res.result.memory) / 1024; // 更新最大最小值\n\n          if (currentMemory < minMemory) {\n            minMemory = currentMemory;\n          }\n\n          if (currentMemory > maxMemory) {\n            maxMemory = currentMemory;\n          }\n\n          _this.memory.data.push(Number(currentMemory.toFixed(2)));\n\n          _this.memory.xdata.push(res.result.time); // 5个点\n\n\n          if (_this.memory.data.length >= 6) {\n            _this.memory.data.shift();\n\n            _this.memory.xdata.shift();\n          } // 更新点信息\n\n\n          _this.$refs.memoryInfo.updateSeries([{\n            name: \"内存(KB)\",\n            data: _this.memory.data\n          }]); // 更新最大最小值\n\n\n          _this.$refs.memoryInfo.updateOptions({\n            xaxis: {\n              categories: _this.memory.xdata\n            },\n            yaxis: {\n              min: minMemory - 2,\n              max: maxMemory + 2\n            }\n          }, true, true);\n        }); // 键值\n\n        (0, _index.getRedisKeySize)().then(function (res) {\n          var currentSize = res.result.keySize; // 更新最大最小值\n\n          if (currentSize < minSize) {\n            minSize = currentSize;\n          }\n\n          if (currentSize > maxSize) {\n            maxSize = currentSize;\n          }\n\n          _this.key.data.push(currentSize);\n\n          _this.key.xdata.push(res.result.time); // 5个点\n\n\n          if (_this.key.data.length >= 6) {\n            _this.key.data.shift();\n\n            _this.key.xdata.shift();\n          } // 更新点信息\n\n\n          _this.$refs.keySize.updateSeries([{\n            name: \"key数量\",\n            data: _this.key.data\n          }]); // 更新最大最小值\n\n\n          _this.$refs.keySize.updateOptions({\n            xaxis: {\n              categories: _this.key.xdata\n            },\n            // 避免最大最小值一致\n            yaxis: {\n              min: minSize - 2,\n              max: maxSize + 2\n            }\n          }, true, true);\n        });\n      }, 5000);\n    },\n    getInfo: function getInfo() {\n      var _this2 = this;\n\n      (0, _index.getRedisInfo)().then(function (res) {\n        var data = [];\n        res.result.forEach(function (e) {\n          if (e.description) {\n            data.push(e);\n          }\n        });\n        _this2.redisInfo = data;\n      });\n    }\n  },\n  beforeDestroy: function beforeDestroy() {\n    if (this.timer) {\n      clearInterval(this.timer);\n    }\n  },\n  mounted: function mounted() {\n    this.init();\n  }\n};\nexports.default = _default;",{"version":3,"sources":["redisMonitor.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\r\n  <div>\r\n    <Row>\r\n      <Col span=\"12\">\r\n        <apexchart\r\n          ref=\"memoryInfo\"\r\n          type=\"area\"\r\n          height=\"350\"\r\n          :options=\"memory.chartOptions\"\r\n          :series=\"memory.series\"\r\n        />\r\n      </Col>\r\n      <Col span=\"12\">\r\n        <apexchart\r\n          ref=\"keySize\"\r\n          type=\"area\"\r\n          height=\"350\"\r\n          :options=\"key.chartOptions\"\r\n          :series=\"key.series\"\r\n        />\r\n      </Col>\r\n    </Row>\r\n    <Row>\r\n      <Divider orientation=\"left\">Redis详细信息</Divider>\r\n      <Table :columns=\"columns\" :data=\"redisInfo\" :show-header=\"false\"></Table>\r\n    </Row>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { getRedisKeySize, getRedisMemory, getRedisInfo } from \"@/api/index\";\r\nexport default {\r\n  name: \"redisMonitor\",\r\n  data() {\r\n    return {\r\n      memory: {\r\n        series: [],\r\n        chartOptions: {\r\n          chart: {\r\n            animations: {\r\n              enabled: true,\r\n              easing: \"linear\",\r\n              dynamicAnimation: {\r\n                speed: 5000\r\n              }\r\n            },\r\n            toolbar: {\r\n              show: false\r\n            },\r\n            zoom: {\r\n              enabled: false\r\n            }\r\n          },\r\n          dataLabels: {\r\n            enabled: false\r\n          },\r\n          stroke: {\r\n            curve: \"smooth\"\r\n          },\r\n          title: {\r\n            text: \"Redis内存实时占用情况（KB）\",\r\n            align: \"left\"\r\n          },\r\n          markers: {\r\n            size: 0\r\n          },\r\n          xaxis: {},\r\n          yaxis: {},\r\n          legend: {\r\n            show: false\r\n          }\r\n        },\r\n        data: [],\r\n        xdata: []\r\n      },\r\n      key: {\r\n        series: [],\r\n        chartOptions: {\r\n          chart: {\r\n            animations: {\r\n              enabled: true,\r\n              easing: \"linear\",\r\n              dynamicAnimation: {\r\n                speed: 5000\r\n              }\r\n            },\r\n            toolbar: {\r\n              show: false\r\n            },\r\n            zoom: {\r\n              enabled: false\r\n            }\r\n          },\r\n          dataLabels: {\r\n            enabled: false\r\n          },\r\n          colors: [\"#f5564e\"],\r\n          stroke: {\r\n            curve: \"smooth\"\r\n          },\r\n          title: {\r\n            text: \"Redis key实时数量（个）\",\r\n            align: \"left\"\r\n          },\r\n          markers: {\r\n            size: 0\r\n          },\r\n          xaxis: {},\r\n          yaxis: {},\r\n          legend: {\r\n            show: false\r\n          }\r\n        },\r\n        data: [],\r\n        xdata: []\r\n      },\r\n      columns: [\r\n        {\r\n          key: \"key\",\r\n          minWidth: 200\r\n        },\r\n        {\r\n          key: \"description\",\r\n          minWidth: 500\r\n        },\r\n        {\r\n          key: \"value\",\r\n          width: 400\r\n        }\r\n      ],\r\n      redisInfo: [],\r\n      timer: null\r\n    };\r\n  },\r\n  methods: {\r\n    init() {\r\n      this.getData();\r\n      this.getInfo();\r\n    },\r\n    // 统计\r\n    getData() {\r\n      let minMemory = 1e10;\r\n      let minSize = 1e10;\r\n      let maxMemory = -1e10;\r\n      let maxSize = -1e10;\r\n      this.timer = setInterval(() => {\r\n        // 内存\r\n        getRedisMemory().then(res => {\r\n          let currentMemory = Number(res.result.memory) / 1024;\r\n          // 更新最大最小值\r\n          if (currentMemory < minMemory) {\r\n            minMemory = currentMemory;\r\n          }\r\n          if (currentMemory > maxMemory) {\r\n            maxMemory = currentMemory;\r\n          }\r\n\r\n          this.memory.data.push(Number(currentMemory.toFixed(2)));\r\n          this.memory.xdata.push(res.result.time);\r\n          // 5个点\r\n          if (this.memory.data.length >= 6) {\r\n            this.memory.data.shift();\r\n            this.memory.xdata.shift();\r\n          }\r\n          // 更新点信息\r\n          this.$refs.memoryInfo.updateSeries([\r\n            {\r\n              name: \"内存(KB)\",\r\n              data: this.memory.data\r\n            }\r\n          ]);\r\n\r\n          // 更新最大最小值\r\n          this.$refs.memoryInfo.updateOptions(\r\n            {\r\n              xaxis: {\r\n                categories: this.memory.xdata\r\n              },\r\n              yaxis: {\r\n                min: minMemory - 2,\r\n                max: maxMemory + 2\r\n              }\r\n            },\r\n            true,\r\n            true\r\n          );\r\n        });\r\n        // 键值\r\n        getRedisKeySize().then(res => {\r\n          let currentSize = res.result.keySize;\r\n          // 更新最大最小值\r\n          if (currentSize < minSize) {\r\n            minSize = currentSize;\r\n          }\r\n          if (currentSize > maxSize) {\r\n            maxSize = currentSize;\r\n          }\r\n\r\n          this.key.data.push(currentSize);\r\n          this.key.xdata.push(res.result.time);\r\n          // 5个点\r\n          if (this.key.data.length >= 6) {\r\n            this.key.data.shift();\r\n            this.key.xdata.shift();\r\n          }\r\n          // 更新点信息\r\n          this.$refs.keySize.updateSeries([\r\n            {\r\n              name: \"key数量\",\r\n              data: this.key.data\r\n            }\r\n          ]);\r\n          // 更新最大最小值\r\n          this.$refs.keySize.updateOptions(\r\n            {\r\n              xaxis: {\r\n                categories: this.key.xdata\r\n              },\r\n              // 避免最大最小值一致\r\n              yaxis: {\r\n                min: minSize - 2,\r\n                max: maxSize + 2\r\n              }\r\n            },\r\n            true,\r\n            true\r\n          );\r\n        });\r\n      }, 5000);\r\n    },\r\n    getInfo() {\r\n      getRedisInfo().then(res => {\r\n        let data = [];\r\n        res.result.forEach(e => {\r\n          if (e.description) {\r\n            data.push(e);\r\n          }\r\n        });\r\n        this.redisInfo = data;\r\n      });\r\n    }\r\n  },\r\n  beforeDestroy() {\r\n    if (this.timer) {\r\n      clearInterval(this.timer);\r\n    }\r\n  },\r\n  mounted() {\r\n    this.init();\r\n  }\r\n};\r\n</script>\r\n<style lang=\"less\">\r\n</style>"],"sourceRoot":"src/views/sys/redis"}]}