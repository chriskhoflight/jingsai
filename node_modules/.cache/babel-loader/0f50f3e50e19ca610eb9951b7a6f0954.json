{"remainingRequest":"D:\\jingsai\\rcms_src\\rcms-pc-web\\node_modules\\babel-loader\\lib\\index.js!D:\\jingsai\\rcms_src\\rcms-pc-web\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\jingsai\\rcms_src\\rcms-pc-web\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\jingsai\\rcms_src\\rcms-pc-web\\src\\views\\lsbusiness\\publish\\publish.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\jingsai\\rcms_src\\rcms-pc-web\\src\\views\\lsbusiness\\publish\\publish.vue","mtime":1568024242632},{"path":"D:\\jingsai\\rcms_src\\rcms-pc-web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\jingsai\\rcms_src\\rcms-pc-web\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\jingsai\\rcms_src\\rcms-pc-web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\jingsai\\rcms_src\\rcms-pc-web\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _publishContent = require(\"@/api/publishContent\");\n\nvar _index = require(\"@/api/index\");\n\nvar _uploadPicInput = _interopRequireDefault(require(\"@/views/components/custom/upload-pic-input\"));\n\nvar _vueUeditorWrap = _interopRequireDefault(require(\"vue-ueditor-wrap\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nvar base = process.env.VUE_APP_BASE_API;\nvar URL = process.env.NODE_ENV === \"production\" ? \"/rcms-pc-web/\" : \"/\";\nvar _default = {\n  name: \"publishContent\",\n  components: {\n    VueUeditorWrap: _vueUeditorWrap.default,\n    uploadPicInput: _uploadPicInput.default\n  },\n  data: function data() {\n    return {\n      validModal: false,\n      // 表单验证\n      ruleValidate: {\n        title: [{\n          required: true,\n          message: \"标题不能为空\",\n          trigger: \"blur\"\n        }],\n        author: [{\n          required: true,\n          message: \"作者不能为空\",\n          trigger: \"blur\"\n        }],\n        contentType: [{\n          required: true,\n          message: \"内容类别不能为空\",\n          trigger: \"blur\"\n        }],\n        seoDescription: [{\n          required: true,\n          message: \"摘要不能为空\",\n          trigger: \"blur\"\n        }],\n        content: [{\n          required: true,\n          message: \"正文不能为空\",\n          trigger: \"blur\"\n        }]\n      },\n      // 内容表单\n      contentForm: {\n        title: \"\",\n        author: \"\",\n        isPublication: 0,\n        isTop: 0,\n        seoDescription: \"\",\n        seoKeywords: \"\",\n        seoTitle: \"\",\n        content: \"\",\n        url: \"\",\n        contentType: \"\",\n        introductionImg: \"\"\n      },\n      // 发布内容类别\n      dictContentType: [],\n      // 发布按钮加载进度\n      submitLoading: false,\n      myConfig: {\n        //   如果需要上传功能,找后端小伙伴要服务器接口地址\n        serverUrl: base + \"/content/uploadToQiniu\",\n        // 你的UEditor资源存放的路径,相对于打包后的index.html\n        // UEDITOR_HOME_URL: \"/rcms-pc-web/ueditor/\",\n        UEDITOR_HOME_URL: URL + \"ueditor/\",\n        // 编辑器不自动被内容撑高\n        autoHeightEnabled: false,\n        // 工具栏是否可以浮动\n        autoFloatEnabled: false,\n        // 初始容器高度\n        initialFrameHeight: 450,\n        // 初始容器宽度\n        initialFrameWidth: \"100%\",\n        // 启动自动保存\n        enableAutoSave: true\n      }\n    };\n  },\n  methods: {\n    handleUpload: function handleUpload(v) {\n      this.contentForm.introductionImg = v;\n    },\n    init: function init() {\n      this.getDictContenTypeData();\n    },\n    // 重置按钮\n    handleReset: function handleReset() {\n      this.$refs.contentForm.resetFields();\n      this.$Message.success(\"内容已重置\");\n    },\n    // 获取发布内容类别字典数据\n    getDictContenTypeData: function getDictContenTypeData() {\n      var _this = this;\n\n      (0, _index.getDictDataByType)(\"contentType\").then(function (res) {\n        if (res.success === true) {\n          _this.dictContentType = res.result;\n        }\n      });\n    },\n    back: function back() {\n      window.history.back();\n    },\n    submitContent: function submitContent() {\n      var _this2 = this;\n\n      this.$refs.contentForm.validate(function (valid) {\n        if (valid) {\n          if (_this2.contentForm.title == \"\" || _this2.contentForm.title == undefined) {\n            return;\n          }\n\n          if (_this2.contentForm.author == \"\" || _this2.contentForm.author == undefined) {\n            return;\n          }\n\n          if (_this2.contentForm.contentType == \"\" || _this2.contentForm.contentType == undefined) {\n            return;\n          }\n\n          if (_this2.contentForm.content == \"\" || _this2.contentForm.content == undefined) {\n            return;\n          }\n\n          _this2.submitLoading = true;\n          _this2.contentForm.isPublication = Number(_this2.contentForm.isPublication);\n          _this2.contentForm.isTop = Number(_this2.contentForm.isTop);\n          (0, _publishContent.saveContent)(_this2.contentForm).then(function (res) {\n            _this2.submitLoading = false;\n\n            if (res.success === true) {\n              _this2.$Message.success(\"操作成功\");\n\n              _this2.$refs.contentForm.resetFields();\n\n              _this2.$router.push({\n                name: \"contentManage\"\n              });\n            }\n          });\n        } else {\n          _this2.validModal = true;\n        }\n      });\n    }\n  },\n  watch: {\n    // 如果路由有变化，会再次执行该方法\n    // $route: \"init\"\n    \"$route.name\": function $routeName(toC, fromC) {\n      if (fromC === \"contentManage\" && toC === \"publishContent\") {\n        // this.fetchData();\n        // this.getDictContenTypeData();\n        this.init(); // console.log(\"发布页URL:\"+URL);\n      }\n    }\n  },\n  mounted: function mounted() {\n    this.init(); // console.log(\"URL:\"+URL)\n  }\n};\nexports.default = _default;",{"version":3,"sources":["publish.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\r\n  <Row>\r\n    <Col>\r\n      <Card>\r\n        <Row>\r\n          <Col>\r\n            <Button type=\"primary\" shape=\"circle\" icon=\"ios-arrow-back\" @click=\"back\">返回</Button>\r\n          </Col>\r\n        </Row>\r\n        <br />\r\n        <Row>\r\n          <Form ref=\"contentForm\" :label-width=\"70\" :model=\"contentForm\" :rules=\"ruleValidate\">\r\n            <Row>\r\n              <Col>\r\n                <!-- prop属性指向验单验证绑定数据里面的属性名 -->\r\n                <Form-item label=\"标题\" prop=\"title\">\r\n                  <Input\r\n                    v-model=\"contentForm.title\"\r\n                    type=\"text\"\r\n                    clearable\r\n                    placeholder=\"请输入文章标题\"\r\n                    style=\"width: 200px\"\r\n                  />\r\n                </Form-item>\r\n              </Col>\r\n            </Row>\r\n            <Row>\r\n              <Col>\r\n                <Form-item label=\"作者\" prop=\"author\">\r\n                  <Input\r\n                    v-model=\"contentForm.author\"\r\n                    type=\"text\"\r\n                    clearable\r\n                    placeholder=\"请输入作者\"\r\n                    style=\"width: 200px\"\r\n                  />\r\n                </Form-item>\r\n              </Col>\r\n            </Row>\r\n            <Row>\r\n              <Col>\r\n                <Form-item label=\"内容类别\" prop=\"contentType\">\r\n                  <Select\r\n                    v-model=\"contentForm.contentType\"\r\n                    placeholder=\"请选择\"\r\n                    clearable\r\n                    style=\"width: 200px\"\r\n                  >\r\n                    <Option\r\n                      v-for=\"(item, i) in dictContentType\"\r\n                      :key=\"i\"\r\n                      :value=\"item.value\"\r\n                    >{{item.title}}</Option>\r\n                  </Select>\r\n                </Form-item>\r\n              </Col>\r\n            </Row>\r\n            <Row>\r\n              <Col>\r\n                <Form-item>\r\n                  <Checkbox v-model.number=\"contentForm.isPublication\">立即发布</Checkbox>\r\n                  <Checkbox v-model.number=\"contentForm.isTop\" prop=\"isTop\">置顶内容</Checkbox>\r\n                </Form-item>\r\n              </Col>\r\n            </Row>\r\n            <Row>\r\n              <Col>\r\n                <Form-item label=\"封面图\" prop=\"introductionImg\">\r\n                  <upload-pic-input @on-change=\"handleUpload\" width=\"285px\" ref=\"upload\"></upload-pic-input>\r\n                </Form-item>\r\n              </Col>\r\n            </Row>\r\n            <Row>\r\n              <Col>\r\n                <Form-item label=\"摘要\" prop=\"seoDescription\">\r\n                  <Input\r\n                    v-model=\"contentForm.seoDescription\"\r\n                    type=\"textarea\"\r\n                    :rows=\"4\"\r\n                    placeholder=\"请输入文章摘要\"\r\n                  />\r\n                </Form-item>\r\n              </Col>\r\n            </Row>\r\n            <Row>\r\n              <Col>\r\n                <Form-item label=\"正文\" prop=\"content\">\r\n                  <vue-ueditor-wrap\r\n                    v-model=\"contentForm.content\"\r\n                    :config=\"myConfig\"\r\n                    style=\"z-index:0;\"\r\n                  ></vue-ueditor-wrap>\r\n                </Form-item>\r\n              </Col>\r\n            </Row>\r\n          </Form>\r\n        </Row>\r\n        <Row type=\"flex\" justify=\"center\">\r\n          <Col>\r\n            <Button type=\"primary\" :loading=\"submitLoading\" @click=\"submitContent\">发布</Button>\r\n          </Col>\r\n          <Col offset=\"1\">\r\n            <Button type=\"primary\" @click=\"handleReset\">重置</Button>\r\n          </Col>\r\n        </Row>\r\n        <Modal v-model=\"validModal\" width=\"80%\">\r\n          <h2>不能为空白：“标题”、“作者”、“内容类别”、“摘要”、“内容”</h2>\r\n        </Modal>\r\n      </Card>\r\n    </Col>\r\n  </Row>\r\n</template>\r\n\r\n<script>\r\nimport {\r\n  getContentTypeListData,\r\n  // 批量删除\r\n  saveContent\r\n} from \"@/api/publishContent\";\r\nimport { getDictDataByType } from \"@/api/index\";\r\nimport uploadPicInput from \"@/views/components/custom/upload-pic-input\";\r\nimport VueUeditorWrap from \"vue-ueditor-wrap\";\r\nlet base = process.env.VUE_APP_BASE_API;\r\nlet URL = process.env.NODE_ENV === \"production\" ? \"/rcms-pc-web/\" : \"/\";\r\nexport default {\r\n  name: \"publishContent\",\r\n  components: {\r\n    VueUeditorWrap,\r\n    uploadPicInput\r\n  },\r\n  data() {\r\n    return {\r\n      validModal: false,\r\n      // 表单验证\r\n      ruleValidate: {\r\n        title: [{ required: true, message: \"标题不能为空\", trigger: \"blur\" }],\r\n        author: [{ required: true, message: \"作者不能为空\", trigger: \"blur\" }],\r\n        contentType: [\r\n          { required: true, message: \"内容类别不能为空\", trigger: \"blur\" }\r\n        ],\r\n        seoDescription: [\r\n          { required: true, message: \"摘要不能为空\", trigger: \"blur\" }\r\n        ],\r\n        content: [{ required: true, message: \"正文不能为空\", trigger: \"blur\" }]\r\n      },\r\n      // 内容表单\r\n      contentForm: {\r\n        title: \"\",\r\n        author: \"\",\r\n        isPublication: 0,\r\n        isTop: 0,\r\n        seoDescription: \"\",\r\n        seoKeywords: \"\",\r\n        seoTitle: \"\",\r\n        content: \"\",\r\n        url: \"\",\r\n        contentType: \"\",\r\n        introductionImg: \"\",\r\n      },\r\n      // 发布内容类别\r\n      dictContentType: [],\r\n      // 发布按钮加载进度\r\n      submitLoading: false,\r\n      myConfig: {\r\n        //   如果需要上传功能,找后端小伙伴要服务器接口地址\r\n        serverUrl: base + \"/content/uploadToQiniu\",\r\n        // 你的UEditor资源存放的路径,相对于打包后的index.html\r\n        // UEDITOR_HOME_URL: \"/rcms-pc-web/ueditor/\",\r\n        UEDITOR_HOME_URL: URL + \"ueditor/\",\r\n        // 编辑器不自动被内容撑高\r\n        autoHeightEnabled: false,\r\n        // 工具栏是否可以浮动\r\n        autoFloatEnabled: false,\r\n        // 初始容器高度\r\n        initialFrameHeight: 450,\r\n        // 初始容器宽度\r\n        initialFrameWidth: \"100%\",\r\n        // 启动自动保存\r\n        enableAutoSave: true\r\n      }\r\n    };\r\n  },\r\n  methods: {\r\n    handleUpload(v) {\r\n      this.contentForm.introductionImg = v;\r\n    },\r\n    init() {\r\n      this.getDictContenTypeData();\r\n    },\r\n    // 重置按钮\r\n    handleReset() {\r\n      this.$refs.contentForm.resetFields();\r\n      this.$Message.success(\"内容已重置\");\r\n    },\r\n    // 获取发布内容类别字典数据\r\n    getDictContenTypeData() {\r\n      getDictDataByType(\"contentType\").then(res => {\r\n        if (res.success === true) {\r\n          this.dictContentType = res.result;\r\n        }\r\n      });\r\n    },\r\n    back() {\r\n      window.history.back();\r\n    },\r\n    submitContent() {\r\n      this.$refs.contentForm.validate(valid => {\r\n        if (valid) {\r\n          if (\r\n            this.contentForm.title == \"\" ||\r\n            this.contentForm.title == undefined\r\n          ) {\r\n            return;\r\n          }\r\n          if (\r\n            this.contentForm.author == \"\" ||\r\n            this.contentForm.author == undefined\r\n          ) {\r\n            return;\r\n          }\r\n          if (\r\n            this.contentForm.contentType == \"\" ||\r\n            this.contentForm.contentType == undefined\r\n          ) {\r\n            return;\r\n          }\r\n          if (\r\n            this.contentForm.content == \"\" ||\r\n            this.contentForm.content == undefined\r\n          ) {\r\n            return;\r\n          }\r\n          this.submitLoading = true;\r\n          this.contentForm.isPublication = Number(\r\n            this.contentForm.isPublication\r\n          );\r\n          this.contentForm.isTop = Number(this.contentForm.isTop);\r\n          saveContent(this.contentForm).then(res => {\r\n            this.submitLoading = false;\r\n            if (res.success === true) {\r\n              this.$Message.success(\"操作成功\");\r\n              this.$refs.contentForm.resetFields();\r\n              this.$router.push({ name: \"contentManage\" });\r\n            }\r\n          });\r\n        } else {\r\n          this.validModal = true;\r\n        }\r\n      });\r\n    }\r\n  },\r\n  watch: {\r\n    // 如果路由有变化，会再次执行该方法\r\n    // $route: \"init\"\r\n    \"$route.name\"(toC, fromC) {\r\n      if (fromC === \"contentManage\" && toC === \"publishContent\") {\r\n        // this.fetchData();\r\n        // this.getDictContenTypeData();\r\n        this.init();\r\n        // console.log(\"发布页URL:\"+URL);\r\n      }\r\n    }\r\n  },\r\n  mounted() {\r\n    this.init();\r\n    // console.log(\"URL:\"+URL)\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n</style>\r\n\r\n"],"sourceRoot":"src/views/lsbusiness/publish"}]}